# Cursor AI Rules for Select3 Front Project

## Language
- **모든 응답은 한국어로 작성**
- Git 커밋 메시지도 반드시 한국어로 작성

## Git Commit Message Rules

### Format (Conventional Commits)
```
type(scope): 한글로 작성된 제목

한글로 작성된 상세 설명 (선택사항)
```

### Types (한글 설명 포함)
- `feat`: 새로운 기능 추가
- `fix`: 버그 수정
- `refactor`: 코드 리팩토링 (기능 변경 없음)
- `style`: 코드 포맷팅, 세미콜론 누락 등 (동작 변경 없음)
- `docs`: 문서 수정
- `test`: 테스트 코드 추가/수정
- `chore`: 빌드 설정, 패키지 매니저 설정 등
- `perf`: 성능 개선
- `ci`: CI 설정 파일 수정
- `build`: 빌드 시스템 또는 외부 종속성 변경
- `revert`: 이전 커밋 되돌리기

### Scope Examples
- `app`: 앱 전반
- `api`: API 관련
- `ui`: UI 컴포�트
- `features`: 기능 모듈
- `hooks`: 커스텀 훅
- `lib`: 유틸리티 라이브러리
- `config`: 설정 파일
- `admin`: 관리자 페이지
- `hotel`: 호텔 관련
- `search`: 검색 기능
- `blog`: 블로그 기능

### Commit Message Guidelines
- 제목은 50자 이내로 작성
- 제목 끝에 마침표(.) 사용하지 않음
- 제목은 명령형으로 작성 (예: "추가", "수정", "제거")
- 본문은 72자마다 줄바꿈
- 본문에는 "무엇을", "왜" 변경했는지 작성
- 여러 변경사항이 있으면 리스트로 작성

### Examples
```
feat(hotel): 호텔 상세 페이지에 리뷰 섹션 추가

- 사용자 리뷰 표시 기능 구현
- 별점 평균 계산 로직 추가
- 리뷰 정렬 옵션 추가
```

```
fix(search): 검색 결과 페이지 무한 로딩 문제 수정

검색어가 비어있을 때 API 호출이 반복되는 버그 수정
```

```
refactor(api): 호텔 API 라우트 구조 개선

- RESTful 패턴에 맞게 엔드포인트 재구성
- 중복 코드 제거 및 재사용 가능한 유틸 함수로 분리
```

```
chore(deps): Tailwind CSS v4로 업그레이드
```

```
style(ui): 버튼 컴포넌트 스타일 일관성 개선
```

### When to Commit
- 단일 논리적 변경사항마다 커밋
- 작업 중간 저장이 아닌 완성된 변경사항만 커밋
- 빌드가 성공하는 상태로 커밋

## AI Behavior for Commit Messages

When generating commit messages:
1. **항상 한국어로 작성**
2. Conventional Commits 형식 준수
3. 변경된 파일과 내용을 분석하여 적절한 type과 scope 선택
4. 제목은 간결하고 명확하게 (50자 이내)
5. 중요한 변경사항이 있다면 본문에 상세히 설명
6. 여러 파일의 관련 변경사항은 하나의 커밋으로 그룹화
7. 관련 없는 변경사항은 별도 커밋으로 분리

## Code Style Rules
[... 나머지 프로젝트 규칙은 docs/*.mdc 파일 참조 ...]


